For my code in part 2, I used insertion sort as my quadratic sort function because based on the data I collected from part 1, insertion sort has the best performance when sorting the array no matter the size of array. I also set the ¡°quickSort¡± function to return the random pivot for the quick sort. In ¡°hybridSort¡± function, I set a if statement if the difference of two subarray(right and left) is reach to 15, the hybrid sort function will transfer to insertion sort. In main function, I asked user to input the size of array and produce random numbers for array. Then transfer data to Sort class to sort the array. What¡¯s more, I also set another checker function in ¡°Check¡±class. In check function, I set 2 arrays to copy the original array then sort the first array with ¡°Array.sort¡±function. I also sort second array with my ¡°Sort¡±function, if the output of my code is match with output of¡°Array.sort¡±. The main function will print the time used by my sort function else will print"Error with sort function, result doesn't match".